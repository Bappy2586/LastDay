My Backend code


server
  controller
      ArtMarketController.js
  
   model
      ArtMarketModel.js
   
   routes
        ArtMarketRoute.js

   index.js

uploads




server/index.js
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import artistCategoryRoutes from "./routes/ArtistCategoryListRoute.js";
import artMarketRoutes from "./routes/ArtMarketRoute.js"; // <-- NEW

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// Use routes
app.use("/api/artist-categories", artistCategoryRoutes);
app.use("/api/art", artMarketRoutes); // <-- NEW

const PORT = process.env.PORT || 4000;
const MONGOURL = process.env.MONGO_URL;

if (!PORT || !MONGOURL) {
  console.error("Missing env vars. Check your .env file.");
  process.exit(1);
}

mongoose
  .connect(MONGOURL)
  .then(() => {
    console.log("DB connected.");
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  })
  .catch((error) => console.log(error));











  
server/model/ArtMarketModel.js
import mongoose from "mongoose";

const artMarketSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  address: {
    type: String,
    required: true
  }
});

export default mongoose.model("ArtMarket", artMarketSchema);










server/controller/ArtMarketController.js
import ArtMarket from "../model/ArtMarketModel.js";

// Create Artist Category
export const createArt = async (req, res) => {
  try {
    const { email } = req.body;
    if (await ArtMarket.findOne({ email })) {
      return res.status(400).json({ message: "Art already exists." });
    }
    const art = new ArtMarket(req.body);
    await art.save();
    res.status(201).json(art);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get all
export const getArts = async (req, res) => {
  try {
    const arts = await ArtMarket.find();
    res.json(arts);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get one
export const getArt = async (req, res) => {
  try {
    const art = await ArtMarket.findById(req.params.id);
    if (!art) return res.status(404).json({ message: "Not found" });
    res.json(art);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Update
export const updateArt = async (req, res) => {
  try {
    const art = await ArtMarket.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!art) return res.status(404).json({ message: "Not found" });
    res.json(art);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Delete
export const deleteArt = async (req, res) => {
  try {
    const art = await ArtMarket.findByIdAndDelete(req.params.id);
    if (!art) return res.status(404).json({ message: "Not found" });
    res.json({ message: "Deleted" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};













server/routes/ArtMarketRoute.js
import express from "express";
import {
  createArt,
  getArts,
  getArt,
  updateArt,
  deleteArt,
} from "../controller/ArtMarketController.js";

const router = express.Router();

router.post("/", createArt);
router.get("/", getArts);
router.get("/:id", getArt);
router.put("/:id", updateArt);
router.delete("/:id", deleteArt);

export default router;














My Frontend code





src
  component 
     ArtMarket
        ArtMarket.js
        ArtMarket.css





  component/ArtMarket/ArtMarket.js
      import React, { useState, useEffect } from "react";
import "./ArtMarket.css";
import img1 from "../../assets/artMarket/img1 2.png";
import img2 from "../../assets/artMarket/image 4.png";
import img3 from "../../assets/artMarket/image 2.png";

const API = "http://localhost:4000/api/art";

const ArtMarket = () => {
  const [form, setForm] = useState({ name: "", email: "", address: "" });
  const [artists, setArtists] = useState([]);
  const [editingId, setEditingId] = useState(null);

  // Fetch all artists
  const fetchArtists = async () => {
    const res = await fetch(API);
    const data = await res.json();
    setArtists(data);
  };

  useEffect(() => {
    fetchArtists();
  }, []);

  // Handle form change
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // Handle submit (add or update)
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (editingId) {
      // Update
      await fetch(`${API}/${editingId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
    } else {
      // Add
      await fetch(API, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
    }
    setForm({ name: "", email: "", address: "" });
    setEditingId(null);
    fetchArtists();
  };

  // Edit button
  const handleEdit = (artist) => {
    setForm({ name: artist.name, email: artist.email, address: artist.address });
    setEditingId(artist._id);
  };

  // Delete button
  const handleDelete = async (id) => {
    if (window.confirm("Delete this artist?")) {
      await fetch(`${API}/${id}`, { method: "DELETE" });
      fetchArtists();
    }
  };

  return (
    <div className="container art-market-container">
      <div className="row d-flex">
        {/* Sidebar */}
        <div className="col-md-3 sidebar">
          <h4>All Artwork/ All</h4>
          <h3>Original Art For Sale</h3>
          <h5>Category</h5>
          <select className="form-select">
            <option>All</option>
          </select>
          <h5>ARTISTS</h5>
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" /> Rokeya Sultana
          </label>
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" /> Mohammad Eunus
          </label>
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" /> Murtaja Baseer
          </label>
          <h5>MEDIUM</h5>
          <h5>MATERIAL</h5>
          <h5>SUBJECT</h5>
          <h5>PRICE</h5>
          <h5>NFT</h5>
          <h5>TIME PERIOD</h5>
          <h5>LIMITED EDITION</h5>
        </div>

        {/* Main Content */}
        <div className="col-md-9 main-content">
          <div className="artist-category-wrapper">
            {/* Form */}
            <form className="artist-form" onSubmit={handleSubmit}>
              <h3>{editingId ? "Update Artist" : "Add Artist"}</h3>
              <input
                type="text"
                name="name"
                placeholder="Artist Name"
                value={form.name}
                onChange={handleChange}
                required
              />
              <input
                type="email"
                name="email"
                placeholder="Artist Email"
                value={form.email}
                onChange={handleChange}
                required
              />
              <input
                type="text"
                name="address"
                placeholder="Artist Address"
                value={form.address}
                onChange={handleChange}
                required
              />
              <button type="submit">{editingId ? "Update" : "Add"}</button>
              {editingId && (
                <button
                  type="button"
                  className="cancel"
                  onClick={() => {
                    setForm({ name: "", email: "", address: "" });
                    setEditingId(null);
                  }}
                >
                  Cancel
                </button>
              )}
            </form>

            {/* List */}
            <div className="artist-list">
              <h3>Artist Categories</h3>
              <table>
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Address</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {artists.map((artist) => (
                    <tr key={artist._id}>
                      <td>{artist.name}</td>
                      <td>{artist.email}</td>
                      <td>{artist.address}</td>
                      <td>
                        <button onClick={() => handleEdit(artist)}>Edit</button>
                        <button onClick={() => handleDelete(artist._id)}>Delete</button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Cards */}
          <div className="row filter-buttons">
            <div className="butt">
              <button className="btn btn-primary">Recommended</button>
              <button className="btn btn-secondary">Image Search</button>
            </div>
            <div className="row">
              {[img1, img2, img3, img1, img2, img3, img1, img2, img3].map((img, i) => (
                <div className="col-md-4" key={i}>
                  <div className="card">
                    <img src={img} alt="pic" className="my-image" />
                    <h5>Turquoise Magenta S 1</h5>
                    <p>Paintings,70.1 W x 100.1 H x 3.8 D cm</p>
                    <table>
                      <tbody>
                        <tr>
                          <td>
                            Peter Nottrott <br />
                            Germany
                          </td>
                          <td>
                            <b>$1,360</b>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ArtMarket;













 component/ArtMarket/ArtMarket.css 
/* Container spacing */
.art-market-container {
    padding: 20px;
}

/* Sidebar styling */
.sidebar {
    padding: 15px;
    margin-right: 10px;
    background-color: #f8f9fa;
    min-height: 100vh;
    text-align: left;
    margin-top: 20px;
    margin-bottom: 20px;
    padding-top: 30px;
    padding-bottom: 30px;
}

.row.d-flex {
    display: flex;
    flex-wrap: nowrap;
}

.sidebar h5 {
    border-bottom: 2px solid #ccc;
    padding-bottom: 20px;
    margin-bottom: 20px;
}

.sidebar label {
    display: block;
    margin-bottom: 8px;
}

/* Main content spacing */
.main-content {
    margin-top: 5px;
    margin-bottom: 20px;
    padding-top: 20px;
    padding-bottom: 20px;
}

/* Form and list wrapper */
.artist-category-wrapper {
    display: flex;
    gap: 30px;
    justify-content: flex-start;
    align-items: flex-start;
    margin: 20px 0;
}

/* Form styling */
.artist-form {
    background: #f4f6f8;
    padding: 20px;
    border-radius: 8px;
    min-width: 260px;
    box-shadow: 0 1px 6px #ccc;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.artist-form input {
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

.artist-form button {
    padding: 8px;
    border: none;
    background: #1976d2;
    color: white;
    border-radius: 4px;
    cursor: pointer;
}

.artist-form button.cancel {
    background: #888;
}

/* List styling */
.artist-list {
    flex: 1;
}

.artist-list table {
    width: 100%;
    border-collapse: collapse;
}

.artist-list th, .artist-list td {
    padding: 10px;
    border-bottom: 1px solid #eee;
    text-align: left;
}

.artist-list button {
    margin-right: 5px;
    padding: 5px 10px;
    border: none;
    background: #1976d2;
    color: white;
    border-radius: 4px;
    cursor: pointer;
}

.artist-list button:last-child {
    background: #d32f2f;
}

/* Buttons styling */
.filter-buttons {
    margin-bottom: 20px;
}

.btn {
    margin-right: 10px;
}

/* Artwork cards grid */
.card {
    margin: 5px;
    padding: 10px;
    text-align: left;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.08);
    background: #fff;
}

.card h5,
.card p {
    margin: 5px 0;
    line-height: 1.2;
}

.card .price {
    text-align: right;
    display: block;
    font-weight: bold;
}

/* Artwork image styling */
.my-image {
    width: 100%;
    height: 200px;
    object-fit: contain;
}

/* Button row styling */
.butt {
    display: flex;
}

/* General text alignment */
p {
    text-align: left;
}









// == Artist Category CRUD Fullstack Example (MERN) ==
// All code in one file for study/reference/demo
// Split into files per instructions for a real project

// ---- BACKEND SETUP ----








server/index.js
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import artistCategoryRoutes from "./routes/ArtistCategoryListRoute.js";
import artMarketRoutes from "./routes/ArtMarketRoute.js"; // <-- NEW

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// Use routes
app.use("/api/artist-categories", artistCategoryRoutes);
app.use("/api/art", artMarketRoutes); // <-- NEW

const PORT = process.env.PORT || 4000;
const MONGOURL = process.env.MONGO_URL;

if (!PORT || !MONGOURL) {
  console.error("Missing env vars. Check your .env file.");
  process.exit(1);
}

mongoose
  .connect(MONGOURL)
  .then(() => {
    console.log("DB connected.");
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  })
  .catch((error) => console.log(error));













// --- server/model/ArtistCategoryListModel.js ---
// This file should be in server/model/ArtistCategoryListModel.js
import mongoose from "mongoose";

const artistCategorySchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  address: {
    type: String,
    required: true
  }
});

export default mongoose.model("ArtistCategory", artistCategorySchema);




















// --- server/routes/ArtistCategoryListRoute.js ---
import express from "express";
import {
  createArtist,
  getArtists,
  getArtist,
  updateArtist,
  deleteArtist,
} from "../controller/ArtistCategoryListController.js";

const router = express.Router();

router.post("/", createArtist);
router.get("/", getArtists);
router.get("/:id", getArtist);
router.put("/:id", updateArtist);
router.delete("/:id", deleteArtist);

export default router;
















// --- server/routes/ArtistCategoryListController.js ---
import ArtistCategory from "../model/ArtistCategoryListModel.js";

// Create Artist Category
export const createArtist = async (req, res) => {
  try {
    const { email } = req.body;
    if (await ArtistCategory.findOne({ email })) {
      return res.status(400).json({ message: "Artist already exists." });
    }
    const artist = new ArtistCategory(req.body);
    await artist.save();
    res.status(201).json(artist);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get all
export const getArtists = async (req, res) => {
  try {
    const artists = await ArtistCategory.find();
    res.json(artists);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get one
export const getArtist = async (req, res) => {
  try {
    const artist = await ArtistCategory.findById(req.params.id);
    if (!artist) return res.status(404).json({ message: "Not found" });
    res.json(artist);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Update
export const updateArtist = async (req, res) => {
  try {
    const artist = await ArtistCategory.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!artist) return res.status(404).json({ message: "Not found" });
    res.json(artist);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Delete
export const deleteArtist = async (req, res) => {
  try {
    const artist = await ArtistCategory.findByIdAndDelete(req.params.id);
    if (!artist) return res.status(404).json({ message: "Not found" });
    res.json({ message: "Deleted" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};















// ---- FRONTEND REACT COMPONENT ----
// Place in: client/src/component/AdminDashboard/Artist/ArtistCategoryList.js
import React, { useEffect, useState } from "react";
import "./ArtistCategoryList.css";

const API = "http://localhost:4000/api/artist-categories";

export default function ArtistCategoryList() {
  const [form, setForm] = useState({ name: "", email: "", address: "" });
  const [artists, setArtists] = useState([]);
  const [editingId, setEditingId] = useState(null);

  // Fetch all artists
  const fetchArtists = async () => {
    const res = await fetch(API);
    const data = await res.json();
    setArtists(data);
  };

  useEffect(() => {
    fetchArtists();
  }, []);

  // Handle form change
  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // Handle submit (add or update)
  const handleSubmit = async e => {
    e.preventDefault();
    if (editingId) {
      // Update
      await fetch(`${API}/${editingId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
    } else {
      // Add
      await fetch(API, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
    }
    setForm({ name: "", email: "", address: "" });
    setEditingId(null);
    fetchArtists();
  };

  // Edit button
  const handleEdit = artist => {
    setForm({ name: artist.name, email: artist.email, address: artist.address });
    setEditingId(artist._id);
  };

  // Delete button
  const handleDelete = async id => {
    if (window.confirm("Delete this artist?")) {
      await fetch(`${API}/${id}`, { method: "DELETE" });
      fetchArtists();
    }
  };

  return (
    <div className="artist-category-wrapper">
      {/* Form */}
      <form className="artist-form" onSubmit={handleSubmit}>
        <h3>{editingId ? "Update Artist" : "Add Artist"}</h3>
        <input
          type="text"
          name="name"
          placeholder="Artist Name"
          value={form.name}
          onChange={handleChange}
          required
        />
        <input
          type="email"
          name="email"
          placeholder="Artist Email"
          value={form.email}
          onChange={handleChange}
          required
        />
        <input
          type="text"
          name="address"
          placeholder="Artist Address"
          value={form.address}
          onChange={handleChange}
          required
        />
        <button type="submit">{editingId ? "Update" : "Add"}</button>
        {editingId && (
          <button type="button" className="cancel" onClick={() => {
            setForm({ name: "", email: "", address: "" });
            setEditingId(null);
          }}>
            Cancel
          </button>
        )}
      </form>

      {/* List */}
      <div className="artist-list">
        <h3>Artist Categories</h3>
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Address</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {artists.map(artist => (
              <tr key={artist._id}>
                <td>{artist.name}</td>
                <td>{artist.email}</td>
                <td>{artist.address}</td>
                <td>
                  <button onClick={() => handleEdit(artist)}>Edit</button>
                  <button onClick={() => handleDelete(artist._id)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


























// ---- FRONTEND REACT COMPONENT ----
// Place in: client/src/component/AdminDashboard/Artist/ArtistCategoryList.css
  // Simple CSS for side-by-side form and table
.artist-category-wrapper {
  display: flex;
  gap: 30px;
  justify-content: flex-start;
  align-items: flex-start;
  margin: 20px;
}

.artist-form {
  background: #f4f6f8;
  padding: 20px;
  border-radius: 8px;
  min-width: 260px;
  box-shadow: 0 1px 6px #ccc;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.artist-form input {
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ddd;
}

.artist-form button {
  padding: 8px;
  border: none;
  background: #1976d2;
  color: white;
  border-radius: 4px;
  cursor: pointer;
}

.artist-form button.cancel {
  background: #888;
}

.artist-list {
  flex: 1;
}

.artist-list table {
  width: 100%;
  border-collapse: collapse;
}

.artist-list th, .artist-list td {
  padding: 10px;
  border-bottom: 1px solid #eee;
  text-align: left;
}

.artist-list button {
  margin-right: 5px;
  padding: 5px 10px;
  border: none;
  background: #1976d2;
  color: white;
  border-radius: 4px;
  cursor: pointer;
}

.artist-list button:last-child {
  background: #d32f2f;
}-